log(qratio)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
newinfo[2] - oldinfo[2]
source("Model_Info.R")
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
oldinfo
newinfo
newinfo[2] - oldinfo[2]
n <- 500; p <- 10; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
PropWeights  <- rowSums(MGLasso_Soln^2) + n^{-2}
# PropWeights  <- rep(1,p)
cur.model    <- 1:7
discardvar   <- 6
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
oldinfo
newinfo
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.5, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.5, N=500)
oldinfo
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.6, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.6, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.4, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.4, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.03, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.03, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
newinfo[2] - oldinfo[2]
log(qratio)
n <- 1000; p <- 10; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
PropWeights  <- rowSums(MGLasso_Soln^2) + n^{-2}
# PropWeights  <- rep(1,p)
cur.model    <- 1:7
discardvar   <- 6
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.03, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.03, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
cur.model    <- 1:8
discardvar   <- 4
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.03, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.03, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
cur.model    <- 1:8
discardvar   <- 8
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.03, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.03, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
# PropWeights  <- rep(1,p)
cur.model    <- 1:9
discardvar   <- 7
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.03, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.03, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.03)
n <- 1000; p <- 20; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
PropWeights  <- rowSums(MGLasso_Soln^2) + n^{-2}
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.03)
MGLasso_Soln
PropWeights
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.5)
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.3)
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
PropWeights  <- rowSums(MGLasso_Soln^2) + n^{-2}
MGLasso_Soln
cur.model    <- c(1,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
cur.model
new.model
newVarNotUsed
VarNotUsed
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
qratio
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.8, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.8, N=500)
oldinfo
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.3, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.3, N=500)
oldinfo
newinfo
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
newinfo[2] - oldinfo[2]
log(qratio)
PropWeights  <- rep(1,p)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.3, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.3, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
qratio
n <- 50; p <- 20; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.3, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.3, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
n <- 100; p <- 20; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.3, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.3, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
newinfo
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
MGLasso_Soln
PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
log(qratio)
newinfo[2] - oldinfo[2]
oldinfo
newinfo
n <- 500; p <- 20; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
newinfo
new.model
cur.model
X
X[new.model,, drop=FALSE]
PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 1
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
newinfo
new.model
PropWeights  <- rep(1,p)
cur.model    <- c(3,4)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
newinfo
cur.model
new.model
PropWeights  <- rep(1,p)
cur.model    <- c(3,4,7)
discardvar   <- 4
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 2
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.2, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.2, N=500)
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
oldinfo
newinfo
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,7)
discardvar   <- 2
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 4
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,7)
discardvar   <- 2
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 1
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,10)
discardvar   <- 10
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 11
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,10)
discardvar   <- 10
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 14
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,10)
discardvar   <- 10
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 17
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
oldinfo
newinfo
PropWeights  <- rep(1,p)
cur.model    <- c(3,2,10)
discardvar   <- 10
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 20
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
PropWeights  <- rep(1,p)
cur.model    <- c(1,2,10)
discardvar   <- 10
VarNotUsed   <- setdiff(1:p, cur.model)
newvar       <- 20
new.model    <- sort(setdiff(c(cur.model, newvar),discardvar))
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <-  (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed]))*((1 / PropWeights[newvar]) / sum(1 / PropWeights[new.model])) /
(((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model]))*(PropWeights[newvar] / sum(PropWeights[VarNotUsed])))
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.1, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.1, N=500)
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
exp(logrho)
logrho
log(runif(1))
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.1)
result
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
n <- 500; p <- 20; q <- 3;
library(MASS)
cor.param        <- 0.95
X                <- t(mvrnorm(n=n, mu=rep(0,p), Sigma = toeplitz(c(1,rep(cor.param, (p-1) ) ) )) )
B                <- matrix(0,q,p)
M0               <- 1:5
B[,M0]           <- matrix(c(rep(rep(0.2,length(M0)), each=q)), nrow=q)
Y                <- B%*%X + matrix(rnorm(n*q, sd=0.5),q,n)
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.3)
MGLasso_Soln <- quiet(InitialValue_MGLasso(Y.m=t(Y), X.m=t(X), lamG=seq(0.05,4,0.1), fold=5))
PropWeights  <- rowSums(MGLasso_Soln^2) + n^{-2}
PropWeights
# PropWeights  <- rep(1,p)
cur.model    <- c(1,4)
discardvar   <- 4
new.model  <- setdiff(cur.model, discardvar)
newVarNotUsed <- setdiff(1:p, new.model)
qratio     <- ( (PropWeights[discardvar] / sum(PropWeights[newVarNotUsed])) / ((1 / PropWeights[discardvar]) / sum(1 / PropWeights[cur.model])) )
oldinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=cur.model, epsilon=0.3, N=500)
newinfo    <- model_info(Y,X, L.X=max(svd(tcrossprod(X))$d), active.set=new.model, epsilon=0.3, N=500)
oldinfo
newinfo
logrho <- newinfo[2] - oldinfo[2] + log(qratio)
logrho
exp(logrho)
log(0.636000)
q
n
pm
pm <- 10
install.packages("CholWishart")
library(CholWishart)
lmvgamma((n-pm)/2, q)
0.25*q*(q-1)*log(pi) + sum(lgamma((n-pm-(1:q)+1)/2))
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
VarNotUsed <- setdiff(1:20, c(1:5,7:20))
VarNotUsed
prob       <- PropWeights[VarNotUsed]/sum(PropWeights[VarNotUsed])
length(prob)
sample(VarNotUsed,1)
sample(6:6,1)
sample(1,1)
sample(2,1)
sample(3,1)
sample(4,1)
sample(5,1)
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
setwd("~/Dropbox/EAS_Functional/Simulation_Study/SourceFunctions")
source("Proposal_Model.R")
source("Model_Info.R")
source("Compute_h.R")
source("MGLasso_Estimate.R")
source("Admissible_Subsets.R")
source("Admissible_Subsets_CV.R")
source("Predict_MLM.R")
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.05)
result$AcceptRatio
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.2)
result$AcceptRatio
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.1)
result$AcceptRatio
models           <- lapply(1:5e2, function(x) which(result$chain[x,]==1))
models.char      <- unlist(lapply(models, paste, collapse = " "))
m                <- models[[which(models.char == names(which.max(table(models.char))))[1]]]
m
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.14)
models           <- lapply(1:5e2, function(x) which(result$chain[x,]==1))
models.char      <- unlist(lapply(models, paste, collapse = " "))
m                <- models[[which(models.char == names(which.max(table(models.char))))[1]]]
m
result$AcceptRatio
result           <- admissible_subsets(Y,X,N=500,steps=1e3,burnin=5e2,PropWeights=NULL,epsilon=0.06)
result$AcceptRatio
models           <- lapply(1:5e2, function(x) which(result$chain[x,]==1))
models.char      <- unlist(lapply(models, paste, collapse = " "))
m                <- models[[which(models.char == names(which.max(table(models.char))))[1]]]
m
table(models.char)
